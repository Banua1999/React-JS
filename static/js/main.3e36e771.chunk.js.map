{"version":3,"sources":["Components/Message.js","Components/Navebar.js","Components/Textform.js","Components/Example.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Component","Navebar","props","react_default","a","createElement","className","concat","mode","href","title","type","data_toggle","data_target","aria_controls","aria_expanded","aria_label","id","onClick","toggelMode","htmlFor","Textform","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","React","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","Components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.3e36e771.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Message extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            message: \"WELCOME TO OUR WEBSITE \"\r\n        }\r\n    }\r\n\r\n    changeMessage() {\r\n        this.setState({\r\n            message: \"THANK YOU FOR YOUR SUPPORT\"\r\n        })\r\n    }\r\n     render() {\r\n       return ( <\r\n            div >\r\n            <\r\n            h3 > { this.state.message } < /h3>  <\r\n            button className = \"btn btn-success\"\r\n            onClick = {\r\n                () => this.changeMessage()\r\n            } > If you like this website, Lets join us ClickMe < /button> < /\r\n            div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Message;","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navebar(props) {\r\n    return ( < nav className = { `navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}` } >\r\n            <\r\n            a className = \"navbar-brand\"\r\n            href = \"#\" > { props.title } < /a>  {\r\n            /* <\r\n                    Link className = \"navbar-brand\"\r\n                    to = \"/TextUtils\" > { props.title } < /Link> */\r\n        } <\r\n        button className = \"navbar-toggler\"\r\n    type = \"button\"\r\n    data_toggle = \"collapse\"\r\n    data_target = \"#navbarSupportedContent\"\r\n    aria_controls = \"navbarSupportedContent\"\r\n    aria_expanded = \"false\"\r\n    aria_label = \"Toggle navigation\" >\r\n        <\r\n        span className = \"navbar-toggler-icon\" > < /span> < /\r\n    button >\r\n\r\n        <\r\n        div className = \"collapse navbar-collapse\"\r\n    id = \"navbarSupportedContent\" >\r\n        <\r\n        ul className = \"navbar-nav mr-auto\" >\r\n        <\r\n        li className = \"nav-item active\" >\r\n        <\r\n        a className = \"nav-link\"\r\n    href = \"#\" > Home < span className = \"sr-only\" > (current) < /span>  < /\r\n    a > {\r\n            /* <\r\n                    Link className = \"nav-link\"\r\n                    to = \"/\" > Home < span className = \"sr-only\" > (current) < /span>  < /\r\n                    Link >  */\r\n        } <\r\n        /\r\n    li > { /* <li className = \"nav-item\" > */ } {\r\n            /* <\r\n                    Link Link className = \"nav-link\"\r\n                    to = \"/about\" > Abouttextutils < /Link> */\r\n        } {\r\n            /* < /\r\n                    li >  */\r\n        } <\r\n        /ul>   <\r\n    div className = { `custom-control custom-switch text-${props.mode==='dark'?'light':'dark'}` } > <\r\n        input type = \"checkbox\"\r\n    onClick = { props.toggelMode }\r\n    className = \"custom-control-input\"\r\n    id = \"customSwitch1\" / >\r\n        <\r\n        label className = \"custom-control-label\"\r\n    htmlFor = \"customSwitch1\" > Enable Dark Mode < /label> < /div > { /* **************************************************************************************************** */ } <\r\n        /div > < /\r\n    nav >\r\n)\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to UpperCase\", \"success\");\r\n    }\r\n    const handleLowClick = () => {\r\n        // console.log(\"uppercase was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to LowerCase\", \"success\");\r\n    }\r\n    const handleClearClick = () => {\r\n        // console.log(\"uppercase was clicked\" + text);\r\n        let newText = \" \";\r\n        setText(newText)\r\n        props.showAlert(\"Text cleared\", \"success\");\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        console.log(\"copied\");\r\n        var text = document.getElementById(\"exampleformControlTextarea1\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to clipboard\", \"success\");\r\n    }\r\n\r\n    // const handlePaste = () => {\r\n    //     console.log(\"pasted\");\r\n    //     var text = document.getElementById(\"exampleformControlTextarea1\");\r\n    //     text.paste();\r\n\r\n    //     navigator.clipboard.readText();\r\n    //     props.showAlert(\"Copied to clipboard\", \"success\");\r\n    // }\r\n\r\n    //rejects\r\n    const handleExtraSpace = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra Space Removed\", \"success\");\r\n\r\n    }\r\n    const handleOnChange = (event) => {\r\n        console.log(\"on change\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text, setText] = useState(\"\"); //react hook state\r\n    //text=\"new text\";//wrong way change state \r\n    // setText(\"new text\"); //correct way to change the state\r\n    return ( <\r\n        >\r\n        <\r\n        div className = 'container'\r\n        style = {\r\n            { color: props.mode === 'light' ? 'white' : 'black' }\r\n        } >\r\n        <\r\n        div className = \"mb-3\" >\r\n        <\r\n        label htmlFor = \"exampleformControlTextarea1\"\r\n        className = \"form-label\" > < h1 > { props.heading } < /h1> < /label > <\r\n        textarea className = \"form-control\"\r\n        value = { text }\r\n        onChange = { handleOnChange }\r\n        style = {\r\n            { backgroundColor: props.mode === 'light' ? 'gray' : '#e5eaee', color: props.mode === 'light' ? 'white' : 'black' }\r\n        }\r\n        id = \"exampleformControlTextarea1\"\r\n        rows = \"8\" > < /textarea> < /\r\n        div >\r\n\r\n        <\r\n        button className = \" btn-outline-primary mx-1\"\r\n        onClick = { handleUpClick } > Convert to uppercase < /button> <\r\n        button className = \" btn-outline-primary mx-1\"\r\n        onClick = { handleLowClick } > Convert to Lowercase < /button> <\r\n        button className = \" btn-outline-primary mx-1\"\r\n        onClick = { handleClearClick } > Cleartext < /button>  <\r\n        button className = \" btn-outline-primary mx-1\"\r\n        onClick = { handleCopy } > Copy Text < /button>  <\r\n        button className = \" btn-outline-primary mx-1\"\r\n        onClick = { handleExtraSpace } > Remove Extra Spaces < /button>  \r\n\r\n\r\n        <\r\n        /div> <\r\n        div className = \"container my-3\"\r\n        style = {\r\n            { color: props.mode === 'light' ? 'white' : 'black' }\r\n        } >\r\n        <\r\n        h2 > Your text summary < /h2> <\r\n        p > { text.split(\"\").length }\r\n        words and { text.length }\r\n        characters < /p>  <\r\n        p > { 0.008 * text.split(\"\").length }\r\n        Minutes read < /p>  <\r\n        h3 > preview < /h3> <\r\n        p > { text.length > 0 ? text : \"Enter something in the textbox above to preview it\" } < /p> < /\r\n        div > <\r\n        />\r\n\r\n    )\r\n}","import React from \"react\";\r\nclass Example extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            count: 0\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return ( <\r\n            div >\r\n            <\r\n            p > You clicked { this.state.count }\r\n            times < /p> <\r\n            button onClick = {\r\n                () => this.setState({ count: this.state.count + 1 })\r\n            } >\r\n            Click me <\r\n            /button> < /\r\n            div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Example;","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (props.alert && < div className = { `alert alert-${ props.alert.type } alert-dismissible fade show` }\r\n        role = \"alert\" > < strong > { capitalize(props.alert.type) } < /strong>: { props.alert.msg }  < /\r\n        div >\r\n    )\r\n}\r\n\r\nexport default Alert","import './App.css';\nimport Message from './Components/Message';\nimport Navebar from './Components/Navebar';\nimport Textform from './Components/Textform';\nimport Example from './Components/Example';\nimport Example1 from './Components/Example1';\nimport About from './Components/About';\nimport React, { useState } from 'react';\nimport Alert from './Components/Alert';\n// import {\n//     BrowserRouter as Router,\n//     Switch,\n//     Route,\n//     Link\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n    const [mode, setMode] = useState('dark') //whether dark mode is enabled or not\n    const [alert, setAlert] = useState(null);\n\n    const showAlert = (message, type) => {\n        setAlert({\n            msg: message,\n            type: type\n        })\n        setTimeout(() => {\n            setAlert(null);\n        }, 1500);\n    }\n\n    const toggelMode = () => {\n        if (mode === 'dark') {\n            setMode('light');\n            document.body.style.backgroundColor = '#233d54';\n            showAlert(\"dark mode is enabled\", \"success\");\n            document.title = \"TextUtils-Dark Mode\";\n            // setInterval(() => {\n            //     document.title = \"TextUtils is amzing mode\";\n            // }, 1500);\n            // setInterval(() => {\n            //     document.title = \"Install TextUtils Now\";\n            // }, 1500);\n        } else {\n            setMode('dark');\n            document.body.style.backgroundColor = 'white';\n            showAlert(\"light mode is enabled\", \"success\");\n            document.title = \"TextUtils-Light Mode\";\n\n        }\n    }\n\n    return ( <\n        >\n        <\n        Navebar title = \"Textutils\"\n        mode = { mode }\n        toggelMode = { toggelMode }\n        / >   <\n        Alert alert = { alert }\n        / >   <\n        div className = \"container my-3\" >\n        <\n        Textform showAlert = { showAlert }\n        heading = \"enter the text analyze below\"\n        mode = { mode }\n        />  < /\n        div >\n        <\n        / >\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}